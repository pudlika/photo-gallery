{"version":3,"sources":["Components/SearchDynamicallyControlComponent.js","Components/ImageComponent.js","Components/ErrorInfoComponent.js","App.js","serviceWorker.js","index.js"],"names":["SearchDynamicallyControlComponent","props","state","searchDynamically","searchDynamicallyChangeHandler","onChange","FormControlLabel","control","Checkbox","checked","this","event","color","label","React","Component","ImageComponent","imgSrc","alt","imgAlt","height","imgHeight","url","src","width","className","ErrorInfoComponent","App","isLoaded","searchedPhrase","allImgs","wasError","testData","isHintVisible","apiUrl","searchInputHandler","bind","searchForPhotos","buttonSubmittedHandler","setState","target","phrase","value","delay","fetch","then","response","json","data","results","length","urls","small","setTimeout","error","catch","e","console","log","loading","resultsLoaded","id","key","TextField","margin","variant","Button","size","onClick","CircularProgress","columnWidth","duration","map","resource","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c47a33aa.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport FormControlLabel   from '@material-ui/core/FormControlLabel';\r\nimport Checkbox           from '@material-ui/core/Checkbox';\r\n\r\nclass SearchDynamicallyControlComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n\r\n        this.state = {\r\n            searchDynamically : props.searchDynamically,\r\n            searchDynamicallyChangeHandler : props.onChange\r\n        }\r\n    }\r\n\r\n    render() \r\n    {\r\n        return(\r\n            <FormControlLabel \r\n                control={\r\n                    <Checkbox\r\n                        checked={this.state.searchDynamically}\r\n                        onChange={(event) => this.state.searchDynamicallyChangeHandler(event)}\r\n                        color=\"primary\"\r\n                    />\r\n                }\r\n                label=\"search dynamically\"\r\n            />\r\n        )\r\n    }\r\n}\r\n    \r\nexport default SearchDynamicallyControlComponent;","import React from 'react';\r\n\r\nclass ImageComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n        this.state = {imgSrc : props.imgSrc, alt : props.imgAlt, height : props.imgHeight}\r\n    }\r\n\r\n    render() {\r\n        var url = this.state != null ? this.state.imgSrc : \"./image-placeholder.png\";\r\n        return(\r\n            <img src={url} alt={this.state.alt} \r\n                width=\"350\" height={this.state.height ? this.state.height : 400} \r\n                className=\"imageThumb\"/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImageComponent;","import React from 'react';\r\nimport ImageComponent from './ImageComponent';\r\n\r\nfunction ErrorInfoComponent () {\r\n\r\n    return (\r\n        <div>\r\n            <label>Sorry, an error appeared </label>\r\n            <br /><br />\r\n            <ImageComponent imgSrc=\"/photo-gallery/image-placeholder.png\" />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ErrorInfoComponent;","import React              from 'react';\r\nimport TextField          from '@material-ui/core/TextField';\r\nimport Button             from '@material-ui/core/Button';\r\nimport StackGrid          from \"react-stack-grid\";\r\nimport FormControlLabel   from '@material-ui/core/FormControlLabel';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n\r\nimport SearchDynamicallyControlComponent  from './Components/SearchDynamicallyControlComponent';\r\nimport ImageComponent                     from './Components/ImageComponent';\r\nimport ErrorInfoComponent                 from './Components/ErrorInfoComponent';\r\n\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  \r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n        isLoaded : false,\r\n        searchedPhrase : \"\",\r\n        allImgs: [],\r\n        wasError: false,\r\n        testData : null,\r\n        isHintVisible :false,\r\n        searchDynamically : true,\r\n        apiUrl : \"https://api.unsplash.com/search/photos?client_id=LiGO4cdLZe7UYuHpFLWU5DTKdIUYIhNdNuenXH9rHjI&query=\"\r\n       //apiUrl : \"https://api.imgflip.com/get_memes\"\r\n    }\r\n    this.searchInputHandler = this.searchInputHandler.bind(this);\r\n    this.searchForPhotos = this.searchForPhotos.bind(this);\r\n    this.searchDynamicallyChangeHandler = this.searchDynamicallyChangeHandler.bind(this);\r\n    this.buttonSubmittedHandler = this.buttonSubmittedHandler.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({isLoaded: false, wasError: false});\r\n\r\n    this.searchForPhotos(\"lion\", 0);\r\n  }\r\n  \r\n  searchDynamicallyChangeHandler(event) {\r\n    this.setState({searchDynamically : event.target.checked, isHintVisible: false})\r\n  }\r\n \r\n  searchInputHandler(event) {\r\n    var phrase = event.target.value;\r\n    this.setState({searchedPhrase: phrase});\r\n\r\n    if (this.state.searchDynamically) {\r\n      this.setState({isLoaded: false, wasError: false, searchedPhrase: phrase});\r\n      this.searchForPhotos(phrase, 1000);\r\n    }\r\n    else {\r\n      this.setState({isHintVisible: true});\r\n    }\r\n  }\r\n\r\n  searchForPhotos(phrase, delay) {\r\n    fetch(this.state.apiUrl + phrase)\r\n      .then(response => response.json())\r\n      .then(\r\n        data => {\r\n              var results = [];\r\n              results = data.results;\r\n              var url = results.length > 0 ? results[0].urls.small : \"./image-big.png\"\r\n              this.setState({testData: url, allImgs: results})\r\n              setTimeout(() => {\r\n                this.setState({isLoaded: true});\r\n              }, delay);\r\n            },\r\n        error => {this.setState({isLoaded: true, testData: \"./image-big.png\", wasError : true })}\r\n        )\r\n      .catch(e => console.log(e));\r\n  }\r\n\r\n  buttonSubmittedHandler(event) {\r\n    this.setState({isLoaded: false, wasError: false});\r\n    this.searchForPhotos(this.state.searchedPhrase, 0);\r\n  }\r\n\r\n  render() {\r\n    var loading = !this.state.isLoaded;\r\n    var resultsLoaded = (!this.state.wasError && this.state.isLoaded);\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <header className=\"App-header\">\r\n          <label id=\"mainLabel\">Photo gallery</label>\r\n\r\n          <SearchDynamicallyControlComponent \r\n            key={this.state.searchDynamically}\r\n            searchDynamically={this.state.searchDynamically} \r\n            onChange={this.searchDynamicallyChangeHandler}/>\r\n        </header>\r\n\r\n        <div className=\"inputContainer\">\r\n          <TextField\r\n            label=\"Search for photos\" \r\n            margin=\"dense\" variant=\"outlined\"\r\n            onChange={this.searchInputHandler}\r\n          />\r\n          {!this.state.searchDynamically && \r\n            <Button variant=\"contained\" size=\"medium\" color=\"primary\"\r\n              onClick={this.buttonSubmittedHandler}\r\n            >\r\n            Search\r\n          </Button>\r\n          }\r\n          <label id=\"hint\" className={this.state.isHintVisible ? \"hint \": \"hint hidden\"}>\r\n            hit the button to run the searching\r\n          </label> \r\n        </div>\r\n        \r\n        <div className=\"App\">\r\n          {loading && \r\n            <div>\r\n              <br/><label>Loading...</label><br/><br/>\r\n              <CircularProgress />\r\n            </div>\r\n          }\r\n\r\n          {resultsLoaded && \r\n            <div>\r\n              <StackGrid columnWidth={355} duration={500}> \r\n              { \r\n                this.state.allImgs.map( resource => (\r\n                    <div key={resource.id}>\r\n                      <ImageComponent imgSrc={resource.urls.small} imgAlt=\"\"\r\n                        imgHeight={350 * resource.height/resource.width}/>\r\n                    </div>\r\n                  )\r\n                )\r\n              } \r\n              </StackGrid>\r\n            </div>\r\n          }\r\n\r\n          {this.state.wasError && \r\n            <ErrorInfoComponent />\r\n          }\r\n          \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}