{"version":3,"sources":["Components/ImageComponent.js","Components/SearchInputComponent.js","App.js","serviceWorker.js","index.js"],"names":["ImageComponent","props","console","log","state","imgSrc","alt","imgAlt","url","this","src","width","className","React","Component","SearchInputComponent","searchDynamically","isHintVisible","buttonSubmittedHandler","searchInputHandler","TextField","label","margin","variant","onChange","event","Button","size","color","onClick","id","App","isLoaded","searchedPhrase","allImgs","wasError","testData","apiUrl","bind","searchForPhotos","searchDynamicallyChangeHandler","target","checked","setState","phrase","value","fetch","then","response","json","data","results","length","urls","small","error","catch","e","FormControlLabel","control","Checkbox","key","columnWidth","map","resource","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ffb1696e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass ImageComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n        console.log(props)\r\n\r\n        this.state = {imgSrc : props.imgSrc, alt : props.imgAlt}\r\n    }\r\n\r\n    render() {\r\n        var url = this.state != null ? this.state.imgSrc : \"./image-placeholder.png\";\r\n        return(\r\n            <img src={url} alt={this.state.alt} width=\"350\" className=\"imageThumb\"/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImageComponent;","import React              from 'react';\r\nimport TextField          from '@material-ui/core/TextField';\r\nimport Button             from '@material-ui/core/Button';\r\n\r\nclass SearchInputComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n        console.log(\"search Input component initializing\");\r\n        console.log(props)\r\n\r\n        this.state = \r\n        {\r\n            searchDynamically : props.searchDynamically,\r\n            isHintVisible : props.isHintVisible,\r\n            buttonSubmittedHandler : props.buttonSubmittedHandler,\r\n            searchInputHandler : props.searchInputHandler\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(\"search Input component rerendered\");\r\n        console.log(this.state);\r\n        return(\r\n            <div className=\"inputContainer\">\r\n                <TextField\r\n                    label=\"Search for photos\" \r\n                    margin=\"dense\" variant=\"outlined\"\r\n                    onChange={(event) => this.state.searchInputHandler(event)}\r\n                />\r\n                {!this.state.searchDynamically && \r\n                    <Button variant=\"contained\" \r\n                        size=\"medium\" color=\"primary\"\r\n                        onClick={(event) => this.state.buttonSubmittedHandler(event)}\r\n                    >\r\n                    Search\r\n                    </Button>\r\n                }\r\n                <label id=\"hint\" className={this.state.isHintVisible ? \"hint \": \"hint hidden\"}>\r\n                    hit the button to run the searching\r\n                </label> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchInputComponent;","import React              from 'react';\n\nimport FormControlLabel   from '@material-ui/core/FormControlLabel';\nimport Checkbox           from '@material-ui/core/Checkbox';\nimport StackGrid          from \"react-stack-grid\";\n\nimport ImageComponent         from './Components/ImageComponent'; \nimport SearchInputComponent   from './Components/SearchInputComponent';\n\nimport './App.css';\n\nclass App extends React.Component {\n  \n  constructor() {\n    super()\n    this.state = {\n        isLoaded : false,\n        searchedPhrase : \"\",\n        allImgs: [],\n        wasError: false,\n        testData : null,\n        isHintVisible :false,\n        searchDynamically : true,\n        apiUrl : \"https://api.unsplash.com/search/photos?client_id=LiGO4cdLZe7UYuHpFLWU5DTKdIUYIhNdNuenXH9rHjI&query=\"\n       //apiUrl : \"https://api.imgflip.com/get_memes\"\n    }\n    this.searchInputHandler = this.searchInputHandler.bind(this);\n    this.searchForPhotos = this.searchForPhotos.bind(this);\n    this.searchDynamicallyChangeHandler = this.searchDynamicallyChangeHandler.bind(this);\n    this.searchForPhotos = this.searchForPhotos.bind(this);\n    this.buttonSubmittedHandler = this.buttonSubmittedHandler.bind(this);\n  }\n\n  searchDynamicallyChangeHandler(event) {\n    console.log(\"checkbox selection changed to: \" + event.target.checked)\n    this.setState({searchDynamically : event.target.checked, isHintVisible: false})\n  }\n\n  componentDidMount() {\n    this.setState({isLoaded: false, wasError: false});\n\n    this.searchForPhotos(\"lion\");\n  }\n \n  searchInputHandler(event) {\n    var phrase = event.target.value;\n    this.setState({searchedPhrase: phrase});\n    \n    console.log(\"searchedPhrase: \" + event.target.value +\";\" + this.state.searchedPhrase + \" phrase: \"+phrase);\n    console.log(this.state);\n\n    if (this.state.searchDynamically) {\n      this.setState({isLoaded: false, wasError: false, searchedPhrase: phrase});\n      this.searchForPhotos(phrase);\n    }\n    else {\n      this.setState({isHintVisible: true});\n    }\n  }\n\n  searchForPhotos(phrase) {\n    fetch(this.state.apiUrl + phrase)\n      .then(response => response.json())\n      .then(\n        data => {\n              var results = [];\n              results = data.results;\n              var url = results.length > 0 ? results[0].urls.small : \"./image-big.png\"\n              this.setState({isLoaded: true, testData: url, allImgs: results\n          })},\n        error => {this.setState({isLoaded: true, testData: \"./image-big.png\", wasError : true })}\n        )\n      .catch(e => console.log(e));\n  }\n\n  buttonSubmittedHandler(event) {\n    console.log(\"button submitted\");\n    console.log(\"searchedPhrase: \" + this.state.searchedPhrase);\n\n    this.setState({isLoaded: false, wasError: false});\n    this.searchForPhotos(this.state.searchedPhrase);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header className=\"App-header\">\n          <label id=\"mainLabel\">Photo gallery</label>\n\n          {/* search dynamically checkbox */}\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={this.state.searchDynamically}\n                onChange={this.searchDynamicallyChangeHandler}\n                color=\"primary\"\n              />\n            }\n            label=\"search dynamically\"\n          />\n        </header>\n\n        <SearchInputComponent\n          key = {this.state.searchDynamically}\n          searchDynamically = {this.state.searchDynamically}\n          isHintVisible = {this.state.isHintVisible}\n          buttonSubmittedHandler = {this.buttonSubmittedHandler}\n          searchInputHandler = {this.searchInputHandler}\n        />\n\n        <div className=\"App\">\n          {!this.state.isLoaded && <label>Loading...</label>}\n\n          {(!this.state.wasError && this.state.isLoaded) && \n            <div>\n              <StackGrid columnWidth={355}>\n              { \n                this.state.allImgs.map( resource => \n                  (\n                    <div key={resource.id}>\n                      \n                      <ImageComponent imgSrc={resource.urls.small} imgAlt=\"\"  />\n                    </div>\n                  )\n                )\n              } \n              </StackGrid>\n            </div>\n          }\n\n          {this.state.wasError && \n          <div>\n            <label>Sorry, an error appear </label>\n            <ImageComponent imgSrc={this.state.testData} imgAlt=\"\"/>\n          </div>}\n          \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}